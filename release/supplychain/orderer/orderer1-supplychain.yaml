apiVersion: flux.weave.works/v1beta1
kind: HelmRelease
metadata:
  name: supplychain-orderer1
  namespace: supplychain-net
  annotations:
    flux.weave.works/automated: "false"
spec:
  releaseName: supplychain-orderer1
  chart:
    git: git@github.com:Henni/blockchain-automation-framework.git
    ref: release
    path: platforms/hyperledger-fabric/charts/orderernode
  values:
    metadata:
      namespace: supplychain-net
      images:
        orderer: hyperledger/fabric-orderer:2.0.0
        alpineutils: registry.hub.docker.com/leppelsack/alpine-utils:1.0

    orderer:
      name: orderer1
      loglevel: info
      localmspid: supplychainMSP
      tlsstatus: true
      keepaliveserverinterval: 10s

    storage:
      storageclassname: supplychainsc
      storagesize: 512Mi  

    service:
      servicetype: ClusterIP
      ports:
        grpc:
          clusteripport: 7050

    vault:
      address: http://10.0.2.2:8200
      role: vault-role
      authpath: supplychain-net-auth
      secretprefix: secret/crypto/ordererOrganizations/supplychain-net/orderers/orderer1.supplychain-net
      imagesecretname: regcred
      serviceaccountname: vault-auth
    kafka:
      readinesscheckinterval: 10
      readinessthreshold: 10
      brokers:
      - kafka-0.broker.supplychain-net.svc.cluster.local:9092
      - kafka-1.broker.supplychain-net.svc.cluster.local:9092
      - kafka-2.broker.supplychain-net.svc.cluster.local:9092
      - kafka-3.broker.supplychain-net.svc.cluster.local:9092

    proxy:
      provider: haproxy
      external_url_suffix: supplychain-net

    genesis: |-
      CiIaIPFpabMMD2WhMFwVqcAuHSoWMkyoUjFWY8GgLFhMfCC/ErOqAQqvqgEKq6oBCngKWggBEAEaBgil9ODyBSIKYWxsY2hhbm5lbCpANWFiMGJiN2E1YjQ0NDllNzgyMjQ0MzI0MDMyMTRmM2NkNDZkZjA0ZDYwMWU3MTE3NjUzMGVkNWZlMGM5M2I1MhIaEhgh82cP4pcLsngHBJgXtrYJpRlpM29Z9McSrakBCqmpARKlqQESq4sBCgtDb25zb3J0aXVtcxKaiwESzooBChVTdXBwbHlDaGFpbkNvbnNvcnRpdW0Ss4oBEuchCgpjYXJyaWVyTVNQEtghGvQfCgNNU1AS7B8S4R8S3h8KCmNhcnJpZXJNU1AS2QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjdUQ0NBWk9nQXdJQkFnSUpBTEJWRURyTHdsYXNNQW9HQ0NxR1NNNDlCQU1DTUZveEN6QUpCZ05WQkFZVApBa2RDTVE4d0RRWURWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlZCQWNNQmt4dmJtUnZiakVRTUE0R0ExVUVDZ3dIClEyRnljbWxsY2pFWE1CVUdBMVVFQXd3T1kyRXVZMkZ5Y21sbGNpMXVaWFF3SGhjTk1qQXdNakkzTWpFME1ESXcKV2hjTk1qSXhNakUzTWpFME1ESXdXakJhTVFzd0NRWURWUVFHRXdKSFFqRVBNQTBHQTFVRUNBd0dURzl1Wkc5dQpNUTh3RFFZRFZRUUhEQVpNYjI1a2IyNHhFREFPQmdOVkJBb01CME5oY25KcFpYSXhGekFWQmdOVkJBTU1EbU5oCkxtTmhjbkpwWlhJdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVPcWZwM0hkd0cwcVgKWXo3YjlkM1d6YzBZaS80NnE4ejhiMDkxbHFqcmRhV1VkdllqTEozc2R0NiszSXZrQUlLWUgvN0p3VzQ4RHRURwpZZVNIQnQ4UDdhTkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEClZSME9CQllFRkpla3V3UlRrRFpYMFhXUzAwZUdJclBpdERzck1Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lDbHQKSElkSWh6blhua1ZsMktYOHJreG5wMHprRVUraWcwMGpZY1Z0YnIrQkFpRUFpL2d2TzN6SER2VTU5RE9vWlh5MwpoTnQ0cVh6R2FWSkl1THBVamxNSmh1TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoitggtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQzd6Q0NBcGFnQXdJQkFnSVVmVzdSRXZTekk3aEdUTVdod2F1anFzQmJxQkV3Q2dZSUtvWkl6ajBFQXdJdwpXakVMTUFrR0ExVUVCaE1DUjBJeER6QU5CZ05WQkFnTUJreHZibVJ2YmpFUE1BMEdBMVVFQnd3R1RHOXVaRzl1Ck1SQXdEZ1lEVlFRS0RBZERZWEp5YVdWeU1SY3dGUVlEVlFRRERBNWpZUzVqWVhKeWFXVnlMVzVsZERBZUZ3MHkKTURBeU1qY3lNVFEyTURCYUZ3MHlNVEF5TWpZeU1UVXhNREJhTUhreEN6QUpCZ05WQkFZVEFrZENNUnN3R1FZRApWUVFIRXhJMU1TNDFNQzh0TUM0eE15OU1iMjVrYjI0eEVEQU9CZ05WQkFvVEIwTmhjbkpwWlhJeEh6QU5CZ05WCkJBc1RCbU5zYVdWdWREQU9CZ05WQkFzVEIyTmhjbkpwWlhJeEdqQVlCZ05WQkFNTUVVRmtiV2x1UUdOaGNuSnAKWlhJdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVybjJaNGZQVFVxMHM4NlMva0dVaApQRUcwYWVqN2FDa2NIbUdiZ28xaG5ZcmlQb21BVzQrMDAybUxuU1VpUGFWd1JSWkRueDR6NTF1REJ5Y1V5T09ECm9LT0NBUmt3Z2dFVk1BNEdBMVVkRHdFQi93UUVBd0lIZ0RBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZERnUVcKQkJRN2phZkdVTkltRUthci81RXFRV0ZJZUloTjZqQWZCZ05WSFNNRUdEQVdnQlNYcExzRVU1QTJWOUYxa3ROSApoaUt6NHJRN0t6QWtCZ05WSFJFRUhUQWJnaGxqWVMxMGIyOXNjeTAxT1Rsak9HSTBOelJrTFdSblkyMXRNSUdPCkJnZ3FBd1FGQmdjSUFRU0JnWHNpWVhSMGNuTWlPbnNpWVdKaFl5NXBibWwwSWpvaWRISjFaU0lzSW1Ga2JXbHUKSWpvaWRISjFaU0lzSW1obUxrRm1abWxzYVdGMGFXOXVJam9pWTJGeWNtbGxjaUlzSW1obUxrVnVjbTlzYkcxbApiblJKUkNJNklrRmtiV2x1UUdOaGNuSnBaWEl0Ym1WMElpd2lhR1l1Vkhsd1pTSTZJbU5zYVdWdWRDSjlmVEFLCkJnZ3Foa2pPUFFRREFnTkhBREJFQWlCeXNuMWZZZDVUZ2loRWNTTSt5V3RacGhPdjRncGVTOFFqdWtMeUlCd3gKT1FJZ0RPM1I0aU9mMFZVTFNYYXZaaGF0K1VWeGxEakY1dmxnZzJJVElIcVV0cmc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KQg4KBFNIQTISBlNIQTI1NkrZBS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCN1RDQ0FaT2dBd0lCQWdJSkFMQlZFRHJMd2xhc01Bb0dDQ3FHU000OUJBTUNNRm94Q3pBSkJnTlZCQVlUCkFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdmJqRVFNQTRHQTFVRUNnd0gKUTJGeWNtbGxjakVYTUJVR0ExVUVBd3dPWTJFdVkyRnljbWxsY2kxdVpYUXdIaGNOTWpBd01qSTNNakUwTURJdwpXaGNOTWpJeE1qRTNNakUwTURJd1dqQmFNUXN3Q1FZRFZRUUdFd0pIUWpFUE1BMEdBMVVFQ0F3R1RHOXVaRzl1Ck1ROHdEUVlEVlFRSERBWk1iMjVrYjI0eEVEQU9CZ05WQkFvTUIwTmhjbkpwWlhJeEZ6QVZCZ05WQkFNTURtTmgKTG1OaGNuSnBaWEl0Ym1WME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRU9xZnAzSGR3RzBxWApZejdiOWQzV3pjMFlpLzQ2cTh6OGIwOTFscWpyZGFXVWR2WWpMSjNzZHQ2KzNJdmtBSUtZSC83SndXNDhEdFRHClllU0hCdDhQN2FOQ01FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWUQKVlIwT0JCWUVGSmVrdXdSVGtEWlgwWFdTMDBlR0lyUGl0RHNyTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSUNsdApISWRJaHpuWG5rVmwyS1g4cmt4bnAwemtFVStpZzAwalljVnRicitCQWlFQWkvZ3ZPM3pIRHZVNTlET29aWHkzCmhOdDRxWHpHYVZKSXVMcFVqbE1KaHVNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tClrOCwgBEuQFCtkFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI3VENDQVpPZ0F3SUJBZ0lKQUxCVkVEckx3bGFzTUFvR0NDcUdTTTQ5QkFNQ01Gb3hDekFKQmdOVkJBWVQKQWtkQ01ROHdEUVlEVlFRSURBWk1iMjVrYjI0eER6QU5CZ05WQkFjTUJreHZibVJ2YmpFUU1BNEdBMVVFQ2d3SApRMkZ5Y21sbGNqRVhNQlVHQTFVRUF3d09ZMkV1WTJGeWNtbGxjaTF1WlhRd0hoY05NakF3TWpJM01qRTBNREl3CldoY05Nakl4TWpFM01qRTBNREl3V2pCYU1Rc3dDUVlEVlFRR0V3SkhRakVQTUEwR0ExVUVDQXdHVEc5dVpHOXUKTVE4d0RRWURWUVFIREFaTWIyNWtiMjR4RURBT0JnTlZCQW9NQjBOaGNuSnBaWEl4RnpBVkJnTlZCQU1NRG1OaApMbU5oY25KcFpYSXRibVYwTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFT3FmcDNIZHdHMHFYCll6N2I5ZDNXemMwWWkvNDZxOHo4YjA5MWxxanJkYVdVZHZZakxKM3NkdDYrM0l2a0FJS1lILzdKd1c0OER0VEcKWWVTSEJ0OFA3YU5DTUVBd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBYVl3SFFZRApWUjBPQkJZRUZKZWt1d1JUa0RaWDBYV1MwMGVHSXJQaXREc3JNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJQ2x0CkhJZEloem5YbmtWbDJLWDhya3hucDB6a0VVK2lnMDBqWWNWdGJyK0JBaUVBaS9ndk8zekhEdlU1OURPb1pYeTMKaE50NHFYekdhVkpJdUxwVWpsTUpodU09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEgZjbGllbnQa4gUK2QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjdUQ0NBWk9nQXdJQkFnSUpBTEJWRURyTHdsYXNNQW9HQ0NxR1NNNDlCQU1DTUZveEN6QUpCZ05WQkFZVApBa2RDTVE4d0RRWURWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlZCQWNNQmt4dmJtUnZiakVRTUE0R0ExVUVDZ3dIClEyRnljbWxsY2pFWE1CVUdBMVVFQXd3T1kyRXVZMkZ5Y21sbGNpMXVaWFF3SGhjTk1qQXdNakkzTWpFME1ESXcKV2hjTk1qSXhNakUzTWpFME1ESXdXakJhTVFzd0NRWURWUVFHRXdKSFFqRVBNQTBHQTFVRUNBd0dURzl1Wkc5dQpNUTh3RFFZRFZRUUhEQVpNYjI1a2IyNHhFREFPQmdOVkJBb01CME5oY25KcFpYSXhGekFWQmdOVkJBTU1EbU5oCkxtTmhjbkpwWlhJdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVPcWZwM0hkd0cwcVgKWXo3YjlkM1d6YzBZaS80NnE4ejhiMDkxbHFqcmRhV1VkdllqTEozc2R0NiszSXZrQUlLWUgvN0p3VzQ4RHRURwpZZVNIQnQ4UDdhTkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEClZSME9CQllFRkpla3V3UlRrRFpYMFhXUzAwZUdJclBpdERzck1Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lDbHQKSElkSWh6blhua1ZsMktYOHJreG5wMHprRVUraWcwMGpZY1Z0YnIrQkFpRUFpL2d2TzN6SER2VTU5RE9vWlh5MwpoTnQ0cVh6R2FWSkl1THBVamxNSmh1TT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBHBlZXIaBkFkbWlucyIzCgdSZWFkZXJzEigSHggBEhoSCBIGCAESAggAGg4SDAoKY2Fycmllck9yZxoGQWRtaW5zIjMKB1dyaXRlcnMSKBIeCAESGhIIEgYIARICCAAaDhIMCgpjYXJyaWVyT3JnGgZBZG1pbnMiNAoGQWRtaW5zEioSIAgBEhwSCBIGCAESAggAGhASDgoKY2Fycmllck9yZxABGgZBZG1pbnMiNwoLRW5kb3JzZW1lbnQSKBIeCAESGhIIEgYIARICCAAaDhIMCgpjYXJyaWVyT3JnGgZBZG1pbnMqBkFkbWlucxLLIQoIc3RvcmVNU1ASviEa4h8KA01TUBLaHxLPHxLMHwoIc3RvcmVNU1AS2QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjdUQ0NBWk9nQXdJQkFnSUpBS0hveEFqTWxmU1JNQW9HQ0NxR1NNNDlCQU1DTUZveEN6QUpCZ05WQkFZVApBbFZUTVJFd0R3WURWUVFJREFoT1pYY2dXVzl5YXpFUk1BOEdBMVVFQnd3SVRtVjNJRmx2Y21zeERqQU1CZ05WCkJBb01CVk4wYjNKbE1SVXdFd1lEVlFRRERBeGpZUzV6ZEc5eVpTMXVaWFF3SGhjTk1qQXdNakkzTWpFME1ETXoKV2hjTk1qSXhNakUzTWpFME1ETXpXakJhTVFzd0NRWURWUVFHRXdKVlV6RVJNQThHQTFVRUNBd0lUbVYzSUZsdgpjbXN4RVRBUEJnTlZCQWNNQ0U1bGR5QlpiM0pyTVE0d0RBWURWUVFLREFWVGRHOXlaVEVWTUJNR0ExVUVBd3dNClkyRXVjM1J2Y21VdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVJRENjWHcwVjYyTkEKYVJ5TnkvTSs2RXQ0QzFIV3M4RXZacGVocnJGd3F6S0RRc1ZaSVhUbXBNcFJ3UmdtSDJsOUVmV3E5TWxSTERYTAowY1NCRUgwSFc2TkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEClZSME9CQllFRkljOTE3VmE3RzF0QUpZN0dwZmZJOGozK2tseU1Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lRREkKdVcvbTJxRy9wWnRRUDdSRjZUcW0zRjg1R20zYitlUzBCRGFtWlV5UEVBSWdkS05IUStNSXM1WEVxai8zdDlkbgpKL2xDYXNFTjlSOCsxaDRoVnFnV3FFOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoipggtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQzVEQ0NBb3VnQXdJQkFnSVVBVDFncDNvYzlyOUlsR1JlM2VyM2pid2hteUV3Q2dZSUtvWkl6ajBFQXdJdwpXakVMTUFrR0ExVUVCaE1DVlZNeEVUQVBCZ05WQkFnTUNFNWxkeUJaYjNKck1SRXdEd1lEVlFRSERBaE9aWGNnCldXOXlhekVPTUF3R0ExVUVDZ3dGVTNSdmNtVXhGVEFUQmdOVkJBTU1ER05oTG5OMGIzSmxMVzVsZERBZUZ3MHkKTURBeU1qY3lNVFEyTURCYUZ3MHlNVEF5TWpZeU1UVXhNREJhTUhNeEN6QUpCZ05WQkFZVEFsVlRNUnN3R1FZRApWUVFIRXhJME1DNDNNeTh0TnpRdlRtVjNJRmx2Y21zeERqQU1CZ05WQkFvVEJWTjBiM0psTVIwd0RRWURWUVFMCkV3WmpiR2xsYm5Rd0RBWURWUVFMRXdWemRHOXlaVEVZTUJZR0ExVUVBd3dQUVdSdGFXNUFjM1J2Y21VdGJtVjAKTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFU3pCUW5sTUpzWGl4bElVN0ZZOC9hQ2wrcnFOZAp6RjFXendNcjB6UEtRL05WWkh4TnRmeFk0ZmNYUzRXckQxaXNDZU9OOEtEMHdMOCszbURCUjh2UDY2T0NBUlF3CmdnRVFNQTRHQTFVZER3RUIvd1FFQXdJSGdEQU1CZ05WSFJNQkFmOEVBakFBTUIwR0ExVWREZ1FXQkJRYnZuRlIKYy8yRnh2M1BzSmhYNUx4RXV6M0xqekFmQmdOVkhTTUVHREFXZ0JTSFBkZTFXdXh0YlFDV094cVgzeVBJOS9wSgpjakFrQmdOVkhSRUVIVEFiZ2hsallTMTBiMjlzY3kwMU9UbGpPR0kwTnpSa0xUbHFObmR1TUlHSkJnZ3FBd1FGCkJnY0lBUVI5ZXlKaGRIUnljeUk2ZXlKaFltRmpMbWx1YVhRaU9pSjBjblZsSWl3aVlXUnRhVzRpT2lKMGNuVmwKSWl3aWFHWXVRV1ptYVd4cFlYUnBiMjRpT2lKemRHOXlaU0lzSW1obUxrVnVjbTlzYkcxbGJuUkpSQ0k2SWtGawpiV2x1UUhOMGIzSmxMVzVsZENJc0ltaG1MbFI1Y0dVaU9pSmpiR2xsYm5RaWZYMHdDZ1lJS29aSXpqMEVBd0lEClJ3QXdSQUlnS1htQklObzJLTnRnSjlab3NpaW5aRmVwWkwzV1oxKzMySDVvTzZuelk3OENJREQ2UDYrNFc0cFkKa2hWK1R5TWdCR3UrSFBQMG1BTHhWakc5dWVmWHliNjMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpCDgoEU0hBMhIGU0hBMjU2StkFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI3VENDQVpPZ0F3SUJBZ0lKQUtIb3hBak1sZlNSTUFvR0NDcUdTTTQ5QkFNQ01Gb3hDekFKQmdOVkJBWVQKQWxWVE1SRXdEd1lEVlFRSURBaE9aWGNnV1c5eWF6RVJNQThHQTFVRUJ3d0lUbVYzSUZsdmNtc3hEakFNQmdOVgpCQW9NQlZOMGIzSmxNUlV3RXdZRFZRUUREQXhqWVM1emRHOXlaUzF1WlhRd0hoY05NakF3TWpJM01qRTBNRE16CldoY05Nakl4TWpFM01qRTBNRE16V2pCYU1Rc3dDUVlEVlFRR0V3SlZVekVSTUE4R0ExVUVDQXdJVG1WM0lGbHYKY21zeEVUQVBCZ05WQkFjTUNFNWxkeUJaYjNKck1RNHdEQVlEVlFRS0RBVlRkRzl5WlRFVk1CTUdBMVVFQXd3TQpZMkV1YzNSdmNtVXRibVYwTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFSURDY1h3MFY2Mk5BCmFSeU55L00rNkV0NEMxSFdzOEV2WnBlaHJyRndxektEUXNWWklYVG1wTXBSd1JnbUgybDlFZldxOU1sUkxEWEwKMGNTQkVIMEhXNk5DTUVBd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBYVl3SFFZRApWUjBPQkJZRUZJYzkxN1ZhN0cxdEFKWTdHcGZmSThqMytrbHlNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUURJCnVXL20ycUcvcFp0UVA3UkY2VHFtM0Y4NUdtM2IrZVMwQkRhbVpVeVBFQUlnZEtOSFErTUlzNVhFcWovM3Q5ZG4KSi9sQ2FzRU45UjgrMWg0aFZxZ1dxRTg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KWs4LCAES5AUK2QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjdUQ0NBWk9nQXdJQkFnSUpBS0hveEFqTWxmU1JNQW9HQ0NxR1NNNDlCQU1DTUZveEN6QUpCZ05WQkFZVApBbFZUTVJFd0R3WURWUVFJREFoT1pYY2dXVzl5YXpFUk1BOEdBMVVFQnd3SVRtVjNJRmx2Y21zeERqQU1CZ05WCkJBb01CVk4wYjNKbE1SVXdFd1lEVlFRRERBeGpZUzV6ZEc5eVpTMXVaWFF3SGhjTk1qQXdNakkzTWpFME1ETXoKV2hjTk1qSXhNakUzTWpFME1ETXpXakJhTVFzd0NRWURWUVFHRXdKVlV6RVJNQThHQTFVRUNBd0lUbVYzSUZsdgpjbXN4RVRBUEJnTlZCQWNNQ0U1bGR5QlpiM0pyTVE0d0RBWURWUVFLREFWVGRHOXlaVEVWTUJNR0ExVUVBd3dNClkyRXVjM1J2Y21VdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUVJRENjWHcwVjYyTkEKYVJ5TnkvTSs2RXQ0QzFIV3M4RXZacGVocnJGd3F6S0RRc1ZaSVhUbXBNcFJ3UmdtSDJsOUVmV3E5TWxSTERYTAowY1NCRUgwSFc2TkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEClZSME9CQllFRkljOTE3VmE3RzF0QUpZN0dwZmZJOGozK2tseU1Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lRREkKdVcvbTJxRy9wWnRRUDdSRjZUcW0zRjg1R20zYitlUzBCRGFtWlV5UEVBSWdkS05IUStNSXM1WEVxai8zdDlkbgpKL2xDYXNFTjlSOCsxaDRoVnFnV3FFOD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBmNsaWVudBriBQrZBS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCN1RDQ0FaT2dBd0lCQWdJSkFLSG94QWpNbGZTUk1Bb0dDQ3FHU000OUJBTUNNRm94Q3pBSkJnTlZCQVlUCkFsVlRNUkV3RHdZRFZRUUlEQWhPWlhjZ1dXOXlhekVSTUE4R0ExVUVCd3dJVG1WM0lGbHZjbXN4RGpBTUJnTlYKQkFvTUJWTjBiM0psTVJVd0V3WURWUVFEREF4allTNXpkRzl5WlMxdVpYUXdIaGNOTWpBd01qSTNNakUwTURNegpXaGNOTWpJeE1qRTNNakUwTURNeldqQmFNUXN3Q1FZRFZRUUdFd0pWVXpFUk1BOEdBMVVFQ0F3SVRtVjNJRmx2CmNtc3hFVEFQQmdOVkJBY01DRTVsZHlCWmIzSnJNUTR3REFZRFZRUUtEQVZUZEc5eVpURVZNQk1HQTFVRUF3d00KWTJFdWMzUnZjbVV0Ym1WME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUlEQ2NYdzBWNjJOQQphUnlOeS9NKzZFdDRDMUhXczhFdlpwZWhyckZ3cXpLRFFzVlpJWFRtcE1wUndSZ21IMmw5RWZXcTlNbFJMRFhMCjBjU0JFSDBIVzZOQ01FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWUQKVlIwT0JCWUVGSWM5MTdWYTdHMXRBSlk3R3BmZkk4ajMra2x5TUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFESQp1Vy9tMnFHL3BadFFQN1JGNlRxbTNGODVHbTNiK2VTMEJEYW1aVXlQRUFJZ2RLTkhRK01JczVYRXFqLzN0OWRuCkovbENhc0VOOVI4KzFoNGhWcWdXcUU4PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIEcGVlchoGQWRtaW5zIjEKB1JlYWRlcnMSJhIcCAESGBIIEgYIARICCAAaDBIKCghzdG9yZU9yZxoGQWRtaW5zIjEKB1dyaXRlcnMSJhIcCAESGBIIEgYIARICCAAaDBIKCghzdG9yZU9yZxoGQWRtaW5zIjIKBkFkbWlucxIoEh4IARIaEggSBggBEgIIABoOEgwKCHN0b3JlT3JnEAEaBkFkbWlucyI1CgtFbmRvcnNlbWVudBImEhwIARIYEggSBggBEgIIABoMEgoKCHN0b3JlT3JnGgZBZG1pbnMqBkFkbWlucxKEIwoMd2FyZWhvdXNlTVNQEvMiGochCgNNU1AS/yAS9CAS8SAKDHdhcmVob3VzZU1TUBL1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQXpDQ0FhbWdBd0lCQWdJSkFNSHhySCtIV3U0c01Bb0dDQ3FHU000OUJBTUNNR1V4Q3pBSkJnTlZCQVlUCkFsVlRNUll3RkFZRFZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVEKQmdOVkJBb01DVmRoY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREFlRncweQpNREF5TWpjeU1UUXdORFZhRncweU1qRXlNVGN5TVRRd05EVmFNR1V4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEClZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVFCZ05WQkFvTUNWZGgKY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREJaTUJNR0J5cUdTTTQ5QWdFRwpDQ3FHU000OUF3RUhBMElBQkJrRmJ2WU9zSXNvV3gvUHhTcEd0MWNnem1tNHNQeDRydGhKNTNMdEJUbzNmVGwzCjJrTGZpRDIrcm1IWk5mYkFqSHA2WkMrRzZaQnpBeldjZit3N1p6V2pRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUIKQWY4d0RnWURWUjBQQVFIL0JBUURBZ0dtTUIwR0ExVWREZ1FXQkJSMU9yZVZmRnBpQ2lsRDJPWHZ4SEc0MXo5cgpmekFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUJHdm80ZGpDKzFubFhVb3pHbUlPQmQxUythZFU2OG4yV1dLRkxMClpmdHpFd0loQUx5VFhjaHBFZWJrK0s5cldXcks4dFRKV0dSWnpBTytCRDdtWENQa29EczYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoi1wgtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJREJ6Q0NBcTJnQXdJQkFnSVVHVmxaOUxJQm5HUE9Lb2NFWkFLOGQvT1dwYTB3Q2dZSUtvWkl6ajBFQXdJdwpaVEVMTUFrR0ExVUVCaE1DVlZNeEZqQVVCZ05WQkFnTURVMWhjM05oWTJoMWMyVjBkSE14RHpBTkJnTlZCQWNNCkJrSnZjM1J2YmpFU01CQUdBMVVFQ2d3SlYyRnlaV2h2ZFhObE1Sa3dGd1lEVlFRRERCQmpZUzUzWVhKbGFHOTEKYzJVdGJtVjBNQjRYRFRJd01ESXlOekl4TkRjd01Gb1hEVEl4TURJeU5qSXhOVEl3TUZvd2dZQXhDekFKQmdOVgpCQVlUQWxWVE1Sd3dHZ1lEVlFRSEV4TTBNaTR6Tmk4dE56RXVNRFl2UW05emRHOXVNUkl3RUFZRFZRUUtFd2xYCllYSmxhRzkxYzJVeElUQU5CZ05WQkFzVEJtTnNhV1Z1ZERBUUJnTlZCQXNUQ1hkaGNtVm9iM1Z6WlRFY01Cb0cKQTFVRUF3d1RRV1J0YVc1QWQyRnlaV2h2ZFhObExXNWxkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSApBMElBQlBmNmk5V1h2SU5JRWppbEZjVU4xQWxvc1hKMVl3Nk1nbWJGYWNTWkNScjhHSW9aeFczN1orVTRFWVoxCjlYNUcxSTlPbW5xaDJqdWJRamRHR2hUTmEvYWpnZ0VkTUlJQkdUQU9CZ05WSFE4QkFmOEVCQU1DQjRBd0RBWUQKVlIwVEFRSC9CQUl3QURBZEJnTlZIUTRFRmdRVW1LMUFYSVpvMjJ4MW5Jc3dpVVV3V2podXlYRXdId1lEVlIwagpCQmd3Rm9BVWRUcTNsWHhhWWdvcFE5amw3OFJ4dU5jL2EzOHdKQVlEVlIwUkJCMHdHNElaWTJFdGRHOXZiSE10Ck5UazVZemhpTkRjMFpDMDFjRFJ6WXpDQmtnWUlLZ01FQlFZSENBRUVnWVY3SW1GMGRISnpJanA3SW1GaVlXTXUKYVc1cGRDSTZJblJ5ZFdVaUxDSmhaRzFwYmlJNkluUnlkV1VpTENKb1ppNUJabVpwYkdsaGRHbHZiaUk2SW5kaApjbVZvYjNWelpTSXNJbWhtTGtWdWNtOXNiRzFsYm5SSlJDSTZJa0ZrYldsdVFIZGhjbVZvYjNWelpTMXVaWFFpCkxDSm9aaTVVZVhCbElqb2lZMnhwWlc1MEluMTlNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUUQwVmJXdzlGVSsKcHhlZHVjK3E5OUE5QUFSTFlRRmJpQkhKejl1MDU3UDdIZ0lnYXRDZHAralhSY3dVd0FiN3ZBY3RWNW9vMmJXMQpyMkg3NTdhemhjL1ArYUk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KQg4KBFNIQTISBlNIQTI1Nkr1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQXpDQ0FhbWdBd0lCQWdJSkFNSHhySCtIV3U0c01Bb0dDQ3FHU000OUJBTUNNR1V4Q3pBSkJnTlZCQVlUCkFsVlRNUll3RkFZRFZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVEKQmdOVkJBb01DVmRoY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREFlRncweQpNREF5TWpjeU1UUXdORFZhRncweU1qRXlNVGN5TVRRd05EVmFNR1V4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEClZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVFCZ05WQkFvTUNWZGgKY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREJaTUJNR0J5cUdTTTQ5QWdFRwpDQ3FHU000OUF3RUhBMElBQkJrRmJ2WU9zSXNvV3gvUHhTcEd0MWNnem1tNHNQeDRydGhKNTNMdEJUbzNmVGwzCjJrTGZpRDIrcm1IWk5mYkFqSHA2WkMrRzZaQnpBeldjZit3N1p6V2pRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUIKQWY4d0RnWURWUjBQQVFIL0JBUURBZ0dtTUIwR0ExVWREZ1FXQkJSMU9yZVZmRnBpQ2lsRDJPWHZ4SEc0MXo5cgpmekFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUJHdm80ZGpDKzFubFhVb3pHbUlPQmQxUythZFU2OG4yV1dLRkxMClpmdHpFd0loQUx5VFhjaHBFZWJrK0s5cldXcks4dFRKV0dSWnpBTytCRDdtWENQa29EczYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpahgwIARKABgr1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQXpDQ0FhbWdBd0lCQWdJSkFNSHhySCtIV3U0c01Bb0dDQ3FHU000OUJBTUNNR1V4Q3pBSkJnTlZCQVlUCkFsVlRNUll3RkFZRFZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVEKQmdOVkJBb01DVmRoY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREFlRncweQpNREF5TWpjeU1UUXdORFZhRncweU1qRXlNVGN5TVRRd05EVmFNR1V4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEClZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVFCZ05WQkFvTUNWZGgKY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREJaTUJNR0J5cUdTTTQ5QWdFRwpDQ3FHU000OUF3RUhBMElBQkJrRmJ2WU9zSXNvV3gvUHhTcEd0MWNnem1tNHNQeDRydGhKNTNMdEJUbzNmVGwzCjJrTGZpRDIrcm1IWk5mYkFqSHA2WkMrRzZaQnpBeldjZit3N1p6V2pRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUIKQWY4d0RnWURWUjBQQVFIL0JBUURBZ0dtTUIwR0ExVWREZ1FXQkJSMU9yZVZmRnBpQ2lsRDJPWHZ4SEc0MXo5cgpmekFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUJHdm80ZGpDKzFubFhVb3pHbUlPQmQxUythZFU2OG4yV1dLRkxMClpmdHpFd0loQUx5VFhjaHBFZWJrK0s5cldXcks4dFRKV0dSWnpBTytCRDdtWENQa29EczYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBmNsaWVudBr+BQr1BS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQXpDQ0FhbWdBd0lCQWdJSkFNSHhySCtIV3U0c01Bb0dDQ3FHU000OUJBTUNNR1V4Q3pBSkJnTlZCQVlUCkFsVlRNUll3RkFZRFZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVEKQmdOVkJBb01DVmRoY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREFlRncweQpNREF5TWpjeU1UUXdORFZhRncweU1qRXlNVGN5TVRRd05EVmFNR1V4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEClZRUUlEQTFOWVhOellXTm9kWE5sZEhSek1ROHdEUVlEVlFRSERBWkNiM04wYjI0eEVqQVFCZ05WQkFvTUNWZGgKY21Wb2IzVnpaVEVaTUJjR0ExVUVBd3dRWTJFdWQyRnlaV2h2ZFhObExXNWxkREJaTUJNR0J5cUdTTTQ5QWdFRwpDQ3FHU000OUF3RUhBMElBQkJrRmJ2WU9zSXNvV3gvUHhTcEd0MWNnem1tNHNQeDRydGhKNTNMdEJUbzNmVGwzCjJrTGZpRDIrcm1IWk5mYkFqSHA2WkMrRzZaQnpBeldjZit3N1p6V2pRakJBTUE4R0ExVWRFd0VCL3dRRk1BTUIKQWY4d0RnWURWUjBQQVFIL0JBUURBZ0dtTUIwR0ExVWREZ1FXQkJSMU9yZVZmRnBpQ2lsRDJPWHZ4SEc0MXo5cgpmekFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUJHdm80ZGpDKzFubFhVb3pHbUlPQmQxUythZFU2OG4yV1dLRkxMClpmdHpFd0loQUx5VFhjaHBFZWJrK0s5cldXcks4dFRKV0dSWnpBTytCRDdtWENQa29EczYKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBHBlZXIaBkFkbWlucyI1CgdSZWFkZXJzEioSIAgBEhwSCBIGCAESAggAGhASDgoMd2FyZWhvdXNlT3JnGgZBZG1pbnMiNQoHV3JpdGVycxIqEiAIARIcEggSBggBEgIIABoQEg4KDHdhcmVob3VzZU9yZxoGQWRtaW5zIjYKBkFkbWlucxIsEiIIARIeEggSBggBEgIIABoSEhAKDHdhcmVob3VzZU9yZxABGgZBZG1pbnMiOQoLRW5kb3JzZW1lbnQSKhIgCAESHBIIEgYIARICCAAaEBIOCgx3YXJlaG91c2VPcmcaBkFkbWlucyoGQWRtaW5zEpYjCg9tYW51ZmFjdHVyZXJNU1ASgiMaiiEKA01TUBKCIRL3IBL0IAoPbWFudWZhY3R1cmVyTVNQEvEFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNBRENDQWFlZ0F3SUJBZ0lKQUpZTnpCSmVNekpvTUFvR0NDcUdTTTQ5QkFNQ01HUXhDekFKQmdOVkJBWVQKQWtOSU1ROHdEUVlEVlFRSURBWmFkWEpwWTJneER6QU5CZ05WQkFjTUJscDFjbWxqYURFVk1CTUdBMVVFQ2d3TQpUV0Z1ZFdaaFkzUjFjbVZ5TVJ3d0dnWURWUVFEREJOallTNXRZVzUxWm1GamRIVnlaWEl0Ym1WME1CNFhEVEl3Ck1ESXlOekl4TkRBd09Gb1hEVEl5TVRJeE56SXhOREF3T0Zvd1pERUxNQWtHQTFVRUJoTUNRMGd4RHpBTkJnTlYKQkFnTUJscDFjbWxqYURFUE1BMEdBMVVFQnd3R1duVnlhV05vTVJVd0V3WURWUVFLREF4TllXNTFabUZqZEhWeQpaWEl4SERBYUJnTlZCQU1NRTJOaExtMWhiblZtWVdOMGRYSmxjaTF1WlhRd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxCmhrak9QUU1CQndOQ0FBUTA2bnI4Y3Z4MVVOVXV6dlFKV2lhWlpNUEx5Z3R3cFlud1JIOXJDSVI3bTVQTEJkUm4Ka0M3VjVpVHowWnhTbW9YTVl3eEE2SHcwOHE3RTZUS3FhaDRQbzBJd1FEQVBCZ05WSFJNQkFmOEVCVEFEQVFILwpNQTRHQTFVZER3RUIvd1FFQXdJQnBqQWRCZ05WSFE0RUZnUVVCS2diejVjOU0xSFhXYjhHdmxXSHFlcnNrQW93CkNnWUlLb1pJemowRUF3SURSd0F3UkFJZ0kzaDVWWHVZeXlVL29BN0I1OG1VcngrSlBLaXBTZGdQWmhtWXZwVEUKR1FnQ0lHU3RkN25lYUFpRGV2Qk1jMzJ5UDhQalgzSFgwdFVWZGI0aDIxbHNyblMrCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KIucILS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQXJtZ0F3SUJBZ0lVVXptcHdYWDNsNS8yUGc1azh6ZzIwZ3ExQVp3d0NnWUlLb1pJemowRUF3SXcKWkRFTE1Ba0dBMVVFQmhNQ1EwZ3hEekFOQmdOVkJBZ01CbHAxY21samFERVBNQTBHQTFVRUJ3d0dXblZ5YVdObwpNUlV3RXdZRFZRUUtEQXhOWVc1MVptRmpkSFZ5WlhJeEhEQWFCZ05WQkFNTUUyTmhMbTFoYm5WbVlXTjBkWEpsCmNpMXVaWFF3SGhjTk1qQXdNakkzTWpFME5qQXdXaGNOTWpFd01qSTJNakUxTVRBd1dqQ0JoekVMTUFrR0ExVUUKQmhNQ1EwZ3hHakFZQmdOVkJBY1RFVFEzTGpNNEx6Z3VOVFF2V25WeWFXTm9NUlV3RXdZRFZRUUtFd3hOWVc1MQpabUZqZEhWeVpYSXhKREFOQmdOVkJBc1RCbU5zYVdWdWREQVRCZ05WQkFzVERHMWhiblZtWVdOMGRYSmxjakVmCk1CMEdBMVVFQXd3V1FXUnRhVzVBYldGdWRXWmhZM1IxY21WeUxXNWxkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUcKU000OUF3RUhBMElBQkpKWjcyZTU3K2FqSE1WQTVYSDJ6K0tUQkREQkhXMEVWV2FoSmt6c2NRc1poRGQ3TmcrWApycU9NSDY2dDErRnBqRDJtZ3lYNUFSOEVTV3c4YzI3NWxBK2pnZ0VqTUlJQkh6QU9CZ05WSFE4QkFmOEVCQU1DCkI0QXdEQVlEVlIwVEFRSC9CQUl3QURBZEJnTlZIUTRFRmdRVWJvY1NJQVdBWUFBd1cyZ2lZZ1pCdFIwYlRNb3cKSHdZRFZSMGpCQmd3Rm9BVUJLZ2J6NWM5TTFIWFdiOEd2bFdIcWVyc2tBb3dKQVlEVlIwUkJCMHdHNElaWTJFdApkRzl2YkhNdE5UazVZemhpTkRjMFpDMTZaMlp5WXpDQm1BWUlLZ01FQlFZSENBRUVnWXQ3SW1GMGRISnpJanA3CkltRmlZV011YVc1cGRDSTZJblJ5ZFdVaUxDSmhaRzFwYmlJNkluUnlkV1VpTENKb1ppNUJabVpwYkdsaGRHbHYKYmlJNkltMWhiblZtWVdOMGRYSmxjaUlzSW1obUxrVnVjbTlzYkcxbGJuUkpSQ0k2SWtGa2JXbHVRRzFoYm5WbQpZV04wZFhKbGNpMXVaWFFpTENKb1ppNVVlWEJsSWpvaVkyeHBaVzUwSW4xOU1Bb0dDQ3FHU000OUJBTUNBMGdBCk1FVUNJUUNNdC9pU2lSWk1ERGVuWkkwQTJYSmk2QUt4OHd3azdMRmRXb0hLZTlDaVZBSWdMT3p1VE9qTjQ0S1gKQmxIbGZ6cmplbCtGY2lRejNNK0hUWmw4dkFzZE92RT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpCDgoEU0hBMhIGU0hBMjU2SvEFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNBRENDQWFlZ0F3SUJBZ0lKQUpZTnpCSmVNekpvTUFvR0NDcUdTTTQ5QkFNQ01HUXhDekFKQmdOVkJBWVQKQWtOSU1ROHdEUVlEVlFRSURBWmFkWEpwWTJneER6QU5CZ05WQkFjTUJscDFjbWxqYURFVk1CTUdBMVVFQ2d3TQpUV0Z1ZFdaaFkzUjFjbVZ5TVJ3d0dnWURWUVFEREJOallTNXRZVzUxWm1GamRIVnlaWEl0Ym1WME1CNFhEVEl3Ck1ESXlOekl4TkRBd09Gb1hEVEl5TVRJeE56SXhOREF3T0Zvd1pERUxNQWtHQTFVRUJoTUNRMGd4RHpBTkJnTlYKQkFnTUJscDFjbWxqYURFUE1BMEdBMVVFQnd3R1duVnlhV05vTVJVd0V3WURWUVFLREF4TllXNTFabUZqZEhWeQpaWEl4SERBYUJnTlZCQU1NRTJOaExtMWhiblZtWVdOMGRYSmxjaTF1WlhRd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxCmhrak9QUU1CQndOQ0FBUTA2bnI4Y3Z4MVVOVXV6dlFKV2lhWlpNUEx5Z3R3cFlud1JIOXJDSVI3bTVQTEJkUm4Ka0M3VjVpVHowWnhTbW9YTVl3eEE2SHcwOHE3RTZUS3FhaDRQbzBJd1FEQVBCZ05WSFJNQkFmOEVCVEFEQVFILwpNQTRHQTFVZER3RUIvd1FFQXdJQnBqQWRCZ05WSFE0RUZnUVVCS2diejVjOU0xSFhXYjhHdmxXSHFlcnNrQW93CkNnWUlLb1pJemowRUF3SURSd0F3UkFJZ0kzaDVWWHVZeXlVL29BN0I1OG1VcngrSlBLaXBTZGdQWmhtWXZwVEUKR1FnQ0lHU3RkN25lYUFpRGV2Qk1jMzJ5UDhQalgzSFgwdFVWZGI0aDIxbHNyblMrCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KWv4LCAES/AUK8QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0FEQ0NBYWVnQXdJQkFnSUpBSllOekJKZU16Sm9NQW9HQ0NxR1NNNDlCQU1DTUdReEN6QUpCZ05WQkFZVApBa05JTVE4d0RRWURWUVFJREFaYWRYSnBZMmd4RHpBTkJnTlZCQWNNQmxwMWNtbGphREVWTUJNR0ExVUVDZ3dNClRXRnVkV1poWTNSMWNtVnlNUnd3R2dZRFZRUUREQk5qWVM1dFlXNTFabUZqZEhWeVpYSXRibVYwTUI0WERUSXcKTURJeU56SXhOREF3T0ZvWERUSXlNVEl4TnpJeE5EQXdPRm93WkRFTE1Ba0dBMVVFQmhNQ1EwZ3hEekFOQmdOVgpCQWdNQmxwMWNtbGphREVQTUEwR0ExVUVCd3dHV25WeWFXTm9NUlV3RXdZRFZRUUtEQXhOWVc1MVptRmpkSFZ5ClpYSXhIREFhQmdOVkJBTU1FMk5oTG0xaGJuVm1ZV04wZFhKbGNpMXVaWFF3V1RBVEJnY3Foa2pPUFFJQkJnZ3EKaGtqT1BRTUJCd05DQUFRMDZucjhjdngxVU5VdXp2UUpXaWFaWk1QTHlndHdwWW53Ukg5ckNJUjdtNVBMQmRSbgprQzdWNWlUejBaeFNtb1hNWXd4QTZIdzA4cTdFNlRLcWFoNFBvMEl3UURBUEJnTlZIUk1CQWY4RUJUQURBUUgvCk1BNEdBMVVkRHdFQi93UUVBd0lCcGpBZEJnTlZIUTRFRmdRVUJLZ2J6NWM5TTFIWFdiOEd2bFdIcWVyc2tBb3cKQ2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnSTNoNVZYdVl5eVUvb0E3QjU4bVVyeCtKUEtpcFNkZ1BaaG1ZdnBURQpHUWdDSUdTdGQ3bmVhQWlEZXZCTWMzMnlQOFBqWDNIWDB0VVZkYjRoMjFsc3JuUysKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBmNsaWVudBr6BQrxBS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDQURDQ0FhZWdBd0lCQWdJSkFKWU56QkplTXpKb01Bb0dDQ3FHU000OUJBTUNNR1F4Q3pBSkJnTlZCQVlUCkFrTklNUTh3RFFZRFZRUUlEQVphZFhKcFkyZ3hEekFOQmdOVkJBY01CbHAxY21samFERVZNQk1HQTFVRUNnd00KVFdGdWRXWmhZM1IxY21WeU1Sd3dHZ1lEVlFRRERCTmpZUzV0WVc1MVptRmpkSFZ5WlhJdGJtVjBNQjRYRFRJdwpNREl5TnpJeE5EQXdPRm9YRFRJeU1USXhOekl4TkRBd09Gb3daREVMTUFrR0ExVUVCaE1DUTBneER6QU5CZ05WCkJBZ01CbHAxY21samFERVBNQTBHQTFVRUJ3d0dXblZ5YVdOb01SVXdFd1lEVlFRS0RBeE5ZVzUxWm1GamRIVnkKWlhJeEhEQWFCZ05WQkFNTUUyTmhMbTFoYm5WbVlXTjBkWEpsY2kxdVpYUXdXVEFUQmdjcWhrak9QUUlCQmdncQpoa2pPUFFNQkJ3TkNBQVEwNm5yOGN2eDFVTlV1enZRSldpYVpaTVBMeWd0d3BZbndSSDlyQ0lSN201UExCZFJuCmtDN1Y1aVR6MFp4U21vWE1Zd3hBNkh3MDhxN0U2VEtxYWg0UG8wSXdRREFQQmdOVkhSTUJBZjhFQlRBREFRSC8KTUE0R0ExVWREd0VCL3dRRUF3SUJwakFkQmdOVkhRNEVGZ1FVQktnYno1YzlNMUhYV2I4R3ZsV0hxZXJza0FvdwpDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdJM2g1Vlh1WXl5VS9vQTdCNThtVXJ4K0pQS2lwU2RnUFpobVl2cFRFCkdRZ0NJR1N0ZDduZWFBaURldkJNYzMyeVA4UGpYM0hYMHRVVmRiNGgyMWxzcm5TKwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIEcGVlchoGQWRtaW5zIjkKBkFkbWlucxIvEiUIARIhEggSBggBEgIIABoVEhMKD21hbnVmYWN0dXJlck9yZxABGgZBZG1pbnMiPAoLRW5kb3JzZW1lbnQSLRIjCAESHxIIEgYIARICCAAaExIRCg9tYW51ZmFjdHVyZXJPcmcaBkFkbWlucyI4CgdSZWFkZXJzEi0SIwgBEh8SCBIGCAESAggAGhMSEQoPbWFudWZhY3R1cmVyT3JnGgZBZG1pbnMiOAoHV3JpdGVycxItEiMIARIfEggSBggBEgIIABoTEhEKD21hbnVmYWN0dXJlck9yZxoGQWRtaW5zKgZBZG1pbnMaQAoVQ2hhbm5lbENyZWF0aW9uUG9saWN5EicSDAgDEggKBkFkbWlucxoXL0NoYW5uZWwvT3JkZXJlci9BZG1pbnMqFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zIi0KBkFkbWlucxIjEggIARIEEgISABoXL0NoYW5uZWwvT3JkZXJlci9BZG1pbnMqFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zEo8bCgdPcmRlcmVyEoMbErYWCg5zdXBwbHljaGFpbk1TUBKjFhqvFAoDTVNQEqcUEpwUEpkUCg5zdXBwbHljaGFpbk1TUBLlBS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCOVRDQ0FadWdBd0lCQWdJSkFQRFFic0FrSnZRUE1Bb0dDQ3FHU000OUJBTUNNRjR4Q3pBSkJnTlZCQVlUCkFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdmJqRVFNQTRHQTFVRUNnd0gKVDNKa1pYSmxjakViTUJrR0ExVUVBd3dTWTJFdWMzVndjR3g1WTJoaGFXNHRibVYwTUI0WERUSXdNREl5TnpJeApNemsxTmxvWERUSXlNVEl4TnpJeE16azFObG93WGpFTE1Ba0dBMVVFQmhNQ1IwSXhEekFOQmdOVkJBZ01Ca3h2CmJtUnZiakVQTUEwR0ExVUVCd3dHVEc5dVpHOXVNUkF3RGdZRFZRUUtEQWRQY21SbGNtVnlNUnN3R1FZRFZRUUQKREJKallTNXpkWEJ3YkhsamFHRnBiaTF1WlhRd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTaAppQXlCei84ZjBnaTUwTWFYeG9ONmJ3VC9CUzFMVTd5VHRiSnNBWE0wa2ZKR3EvSXFmTGZNcHNsRG9kVlZubGlkCi9MOWNEOHJZUXhtaTh0Mm5YWGVZbzBJd1FEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BNEdBMVVkRHdFQi93UUUKQXdJQnBqQWRCZ05WSFE0RUZnUVVYMjg1ZmEra21nMlNGcjdQQWRRMzdDV2kzYk13Q2dZSUtvWkl6ajBFQXdJRApTQUF3UlFJZ0dOTWc0dGNXQVZvTHBPMmsyNG5pMVppaGMxeURCTGJhc0RGaEpLcmY4UDBDSVFEODlDaG9pUm10Ck9BT3VNTXRJMDc3d0s2UmpoeDlCdE9YdnpMOFZnaWRJaWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCiKmCC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDNHpDQ0FvcWdBd0lCQWdJVVMwcXdzOEpDUnpabEEvUkg5d29UaXFQZkVnVXdDZ1lJS29aSXpqMEVBd0l3ClhqRUxNQWtHQTFVRUJoTUNSMEl4RHpBTkJnTlZCQWdNQmt4dmJtUnZiakVQTUEwR0ExVUVCd3dHVEc5dVpHOXUKTVJBd0RnWURWUVFLREFkUGNtUmxjbVZ5TVJzd0dRWURWUVFEREJKallTNXpkWEJ3YkhsamFHRnBiaTF1WlhRdwpIaGNOTWpBd01qSTNNakUwTlRBd1doY05NakV3TWpJMk1qRTFNREF3V2pCdE1Rc3dDUVlEVlFRR0V3SkhRakViCk1Ca0dBMVVFQnhNU05URXVOVEF2TFRBdU1UTXZURzl1Wkc5dU1SQXdEZ1lEVlFRS0V3ZFBjbVJsY21WeU1ROHcKRFFZRFZRUUxFd1pqYkdsbGJuUXhIakFjQmdOVkJBTU1GVUZrYldsdVFITjFjSEJzZVdOb1lXbHVMVzVsZERCWgpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJQRVE1a0xHK2gwSElTZkljK0dleHpYTHk2bGZpV0l3Cm5ETVhZemRkZ1JzckxFNUVtcDVTMnhPeGJBQStHSG1aSlRiU2x1d3pxVkMySUUvMXdYaSs5R1dqZ2dFVk1JSUIKRVRBT0JnTlZIUThCQWY4RUJBTUNCNEF3REFZRFZSMFRBUUgvQkFJd0FEQWRCZ05WSFE0RUZnUVU5Q0l1cXpDYQplOUxQZkhiVlhjMG1zOFNnOVRJd0h3WURWUjBqQkJnd0ZvQVVYMjg1ZmEra21nMlNGcjdQQWRRMzdDV2kzYk13CkpBWURWUjBSQkIwd0c0SVpZMkV0ZEc5dmJITXROVGs1WXpoaU5EYzBaQzAyWkdKek5EQ0JpZ1lJS2dNRUJRWUgKQ0FFRWZuc2lZWFIwY25NaU9uc2lZV0poWXk1cGJtbDBJam9pZEhKMVpTSXNJbUZrYldsdUlqb2lkSEoxWlNJcwpJbWhtTGtGbVptbHNhV0YwYVc5dUlqb2lJaXdpYUdZdVJXNXliMnhzYldWdWRFbEVJam9pUVdSdGFXNUFjM1Z3CmNHeDVZMmhoYVc0dGJtVjBJaXdpYUdZdVZIbHdaU0k2SW1Oc2FXVnVkQ0o5ZlRBS0JnZ3Foa2pPUFFRREFnTkgKQURCRUFpQjVySDNaRU9CMnFTbkNrYkliYk9VRDZhMm1INzVtbGluS0MyRXFkQ2t1WHdJZ055VGhLTS9sb1BQNgpiaXRnNU5JMlpQbzRSaWdFQXJ1QTNRQU5UWEdPcVZ3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCkIOCgRTSEEyEgZTSEEyNTZK5QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjlUQ0NBWnVnQXdJQkFnSUpBUERRYnNBa0p2UVBNQW9HQ0NxR1NNNDlCQU1DTUY0eEN6QUpCZ05WQkFZVApBa2RDTVE4d0RRWURWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlZCQWNNQmt4dmJtUnZiakVRTUE0R0ExVUVDZ3dIClQzSmtaWEpsY2pFYk1Ca0dBMVVFQXd3U1kyRXVjM1Z3Y0d4NVkyaGhhVzR0Ym1WME1CNFhEVEl3TURJeU56SXgKTXprMU5sb1hEVEl5TVRJeE56SXhNemsxTmxvd1hqRUxNQWtHQTFVRUJoTUNSMEl4RHpBTkJnTlZCQWdNQmt4dgpibVJ2YmpFUE1BMEdBMVVFQnd3R1RHOXVaRzl1TVJBd0RnWURWUVFLREFkUGNtUmxjbVZ5TVJzd0dRWURWUVFECkRCSmpZUzV6ZFhCd2JIbGphR0ZwYmkxdVpYUXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0FBU2gKaUF5QnovOGYwZ2k1ME1hWHhvTjZid1QvQlMxTFU3eVR0YkpzQVhNMGtmSkdxL0lxZkxmTXBzbERvZFZWbmxpZAovTDljRDhyWVF4bWk4dDJuWFhlWW8wSXdRREFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTRHQTFVZER3RUIvd1FFCkF3SUJwakFkQmdOVkhRNEVGZ1FVWDI4NWZhK2ttZzJTRnI3UEFkUTM3Q1dpM2JNd0NnWUlLb1pJemowRUF3SUQKU0FBd1JRSWdHTk1nNHRjV0FWb0xwTzJrMjRuaTFaaWhjMXlEQkxiYXNERmhKS3JmOFAwQ0lRRDg5Q2hvaVJtdApPQU91TU10STA3N3dLNlJqaHg5QnRPWHZ6TDhWZ2lkSWlnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoaBkFkbWlucyI3CgdSZWFkZXJzEiwSIggBEh4SCBIGCAESAggAGhISEAoOc3VwcGx5Y2hhaW5PcmcaBkFkbWlucyI3CgdXcml0ZXJzEiwSIggBEh4SCBIGCAESAggAGhISEAoOc3VwcGx5Y2hhaW5PcmcaBkFkbWlucyI4CgZBZG1pbnMSLhIkCAESIBIIEgYIARICCAAaFBISCg5zdXBwbHljaGFpbk9yZxABGgZBZG1pbnMiOwoLRW5kb3JzZW1lbnQSLBIiCAESHhIIEgYIARICCAAaEhIQCg5zdXBwbHljaGFpbk9yZxoGQWRtaW5zKgZBZG1pbnMaIgoJQmF0Y2hTaXplEhUSCwgKEICAgDEYgIBAGgZBZG1pbnMaHgoMQmF0Y2hUaW1lb3V0Eg4SBAoCMnMaBkFkbWlucxofChNDaGFubmVsUmVzdHJpY3Rpb25zEggaBkFkbWlucxokCgxDYXBhYmlsaXRpZXMSFBIKCggKBFYxXzESABoGQWRtaW5zGvgBCgxLYWZrYUJyb2tlcnMS5wES3AEKNWthZmthLTAuYnJva2VyLnN1cHBseWNoYWluLW5ldC5zdmMuY2x1c3Rlci5sb2NhbDo5MDkyCjVrYWZrYS0xLmJyb2tlci5zdXBwbHljaGFpbi1uZXQuc3ZjLmNsdXN0ZXIubG9jYWw6OTA5Mgo1a2Fma2EtMi5icm9rZXIuc3VwcGx5Y2hhaW4tbmV0LnN2Yy5jbHVzdGVyLmxvY2FsOjkwOTIKNWthZmthLTMuYnJva2VyLnN1cHBseWNoYWluLW5ldC5zdmMuY2x1c3Rlci5sb2NhbDo5MDkyGgZBZG1pbnMaIgoNQ29uc2Vuc3VzVHlwZRIREgcKBWthZmthGgZBZG1pbnMiIgoHUmVhZGVycxIXEg0IAxIJCgdSZWFkZXJzGgZBZG1pbnMiIgoHV3JpdGVycxIXEg0IAxIJCgdXcml0ZXJzGgZBZG1pbnMiIgoGQWRtaW5zEhgSDggDEgoKBkFkbWlucxACGgZBZG1pbnMiKgoPQmxvY2tWYWxpZGF0aW9uEhcSDQgDEgkKB1dyaXRlcnMaBkFkbWlucyoGQWRtaW5zGiYKEEhhc2hpbmdBbGdvcml0aG0SEhIICgZTSEEyNTYaBkFkbWlucxotChlCbG9ja0RhdGFIYXNoaW5nU3RydWN0dXJlEhASBgj/////DxoGQWRtaW5zGnEKEE9yZGVyZXJBZGRyZXNzZXMSXRJCCkBvcmRlcmVyMS5zdXBwbHljaGFpbi1uZXQ6NzA1MCAgICAtIG9yZGVyZXIyLnN1cHBseWNoYWluLW5ldDo3MDUwGhcvQ2hhbm5lbC9PcmRlcmVyL0FkbWlucxokCgxDYXBhYmlsaXRpZXMSFBIKCggKBFYxXzESABoGQWRtaW5zIiIKB1JlYWRlcnMSFxINCAMSCQoHUmVhZGVycxoGQWRtaW5zIiIKB1dyaXRlcnMSFxINCAMSCQoHV3JpdGVycxoGQWRtaW5zIiIKBkFkbWlucxIYEg4IAxIKCgZBZG1pbnMQAhoGQWRtaW5zKgZBZG1pbnMaDgoECgIKAAoACgAKAAoA
